{"version":3,"sources":["logo.svg","serviceWorker.js","pathFinding/node/node.jsx","algorithms/pathFindingAlgorithms.js","pathFinding/pathFindingVisualiser.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Node","state","extraClassName","this","props","col","row","start","end","wall","onMouseDown","onMouseUp","onMouseEnter","onClick","path","id","className","Component","aStarAnimation","dijkstraAnimation","gethCost","node","getDistance","hCost","node1","node2","Math","abs","getNeighbors","grid","neighbors","push","clearAnimations","startRow","startCol","endRow","endCol","options","label","value","PathFinder","reSetGrid","temp","currentRow","setState","reSetClass","document","getElementById","speedOnChange","e","speed","target","mouseDownHandler","status","newGrid","createWallToggle","mousePress","mouseEnterHandler","mouseUpHandler","slice","newNode","autoGenerate","col1","floor","random","row1","col2","row2","n","onClickChange","createStartOrEnd","console","log","findPath","algorithm","doDijkstra","doaStar","startNode","endNode","open","close","gCost","fCost","currentNode","isTrapped","started","length","alert","forEach","splice","indexOf","pathAnimation","step","parent","stepCount","reverse","includes","newgCost","newhCost","newfCost","aStar","i","setTimeout","unvisited","nodes","getAllNodes","visited","distance","filter","neighbor","neighborDistance","dijkstra","width","height","viewBox","class","fill","xmlns","fill-rule","d","type","min","max","onChange","map","rowIdx","key","nodeIdx","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.be6f4b0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n/* eslint-disable */\nclass Node extends Component {\n    state = {  }\n\n    render() { \n        let {\n            col,\n            row, \n            start, \n            end, \n            wall,\n            onMouseDown,\n            onMouseUp,\n            onMouseEnter,\n            onClick,\n            path,\n\n\n        } = this.props;\n        let extraClassName;\n        if(start){\n            extraClassName = 'node-start border-0'\n        } else if(end){\n            extraClassName = 'node-end border-0'\n        } else if(wall){\n            extraClassName = 'node-wall border-0'\n        } else if(path){\n            extraClassName = 'node-path border-0'\n        } else {\n            extraClassName = ''\n        }\n\n        return <div\n         id={`node-${row}-${col}`} \n         className={`node ${extraClassName}`}\n         onMouseDown={()=> onMouseDown(row,col)}\n         onMouseUp={()=> onMouseUp()}\n         onMouseEnter={()=> onMouseEnter(row,col)}\n         onClick={()=> onClick(row, col)}\n\n        \n        ></div>;\n    }\n}\n \nexport default Node;","\n/* eslint-disable */\n\nlet aStarAnimation = []\nlet dijkstraAnimation = []\nlet color1 = 'yellow'\n\n// ------------------------------------------------dijkstra------------------------------------------------------------\n\nexport const dijkstra = (grid, startNode, endNode) => {\n\n    let unvisited = getAllNodes(grid)\n    let visited = []\n    let currentNode = startNode\n    currentNode.distance = 0\n    \n    // startNode.length = 0\n\n\n    while(unvisited.length>0){\n\n        let started = false\n\n        // currentNode.distance = getDistance(currentNode, startNode)\n\n        let neighbors = getNeighbors(currentNode, grid)\n        let filteredNeighbors = neighbors.filter(function(neighbor){\n            if(visited.includes(neighbor)===false && neighbor.wall===false){\n\n                dijkstraAnimation.push([2, neighbor.row, neighbor.col])\n\n\n                return neighbor \n            }\n        })\n\n    \n\n        filteredNeighbors.forEach((neighbor)=>{\n            \n            // let distanceToStart = getDistance(neighbor,startNode)\n            // let distanceToStart = currentNode.distance + 1\n\n\n            // let neighborDistance = currentNode.distance + distanceToStart\n            let neighborDistance = currentNode.distance + 1\n\n            if(neighbor.distance){\n                if(neighborDistance < neighbor.distance){\n                    // neighbor.distance = currentNode.distance + distanceToStart\n                    neighbor.distance = currentNode.distance + 1\n\n                    neighbor.parent = currentNode\n                }\n            }else{\n                // neighbor.distance = currentNode.distance + distanceToStart\n                neighbor.distance = currentNode.distance + 1\n\n                neighbor.parent = currentNode\n            }            \n        })\n\n        unvisited.splice(unvisited.indexOf(currentNode), 1 );\n        visited.push(currentNode)\n\n        dijkstraAnimation.push([3, currentNode.row, currentNode.col])\n\n\n        unvisited.forEach((node)=>{\n\n            if(node.distance && node.wall ===false){\n                if(started ===false){\n                    currentNode = node\n                    started = true\n                } else if(node.distance < currentNode.distance){\n                    currentNode = node\n                }\n            }\n        })\n\n        dijkstraAnimation.push([4, currentNode.row, currentNode.col])\n\n\n\n        if(currentNode.wall === true){\n            alert('wall neighbor!!')\n        }\n\n        if(currentNode === endNode){\n            break\n        }\n\n        if(unvisited.length===0){\n            alert('No Way')\n            return dijkstraAnimation\n        }\n\n    }\n\n   \n    console.log('Reached!')\n    let path = []\n    let pathAnimation = []\n    let step = endNode.parent\n    let stepCount = 1\n    while(step!== startNode){\n        path.push(step)\n        pathAnimation.push([1, step.row, step.col])\n        step = step.parent\n        stepCount ++\n    }\n    console.log('dijkstra count: ' + stepCount)\n    pathAnimation.reverse()\n    pathAnimation.forEach((step)=>{\n        dijkstraAnimation.push(step)\n    })\n    return dijkstraAnimation\n    \n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ------------------------------------------------A*------------------------------------------------------------\n\nexport const aStar = (grid, startNode, endNode) => {\n\n    // G Cost = Distance from starting node\n    // H Cost = Distance from end node\n    // F Cost = G + H\n\n    let open = []\n    let close = []\n\n    startNode.gCost= 0\n    startNode.fCost= 0\n    startNode.hCost= 0\n\n    let currentNode = startNode\n    open.push(startNode)\n\n    while(true){\n\n        // let started = false\n        let isTrapped =true;\n        let started = false\n        // Get the current node as the lowest fCost in open list\n        if (open.length !== 0){\n            isTrapped = false\n        }\n\n        if(isTrapped){\n            alert('No Way')\n            let path = []\n            return aStarAnimation\n        }\n        \n        // Get current Node------------------------------------------------------------------------------------\n        open.forEach((node)=>{\n\n            if(started === false){\n                currentNode = node\n                started = true\n            \n            } else{\n                // if(node.hCost < currentNode.hCost){\n                //     currentNode = node\n                // } \n                // else if(node.hCost === currentNode.hCost && node.gCost>currentNode.gCost){\n                //     currentNode = node\n                // }\n                // else if(node.fCost === currentNode.fCost && node.hCost === currentNode.hCost && node.gCost > currentNode.gCost){\n                //     currentNode = node\n                // }\n                // else if(node.fCost === currentNode.fCost && node.hCost === currentNode.hCost && node.gCost === currentNode.gCost){\n                //     currentNode = node\n                // }\n                if(node.fCost < currentNode.fCost){\n                    currentNode = node\n                } \n                else if(node.fCost === currentNode.fCost && node.hCost<currentNode.hCost){\n                    currentNode = node\n                }\n                else if(node.fCost === currentNode.fCost && node.hCost === currentNode.hCost && node.gCost > currentNode.gCost){\n                    currentNode = node\n                }\n                else if(node.fCost === currentNode.fCost && node.hCost === currentNode.hCost && node.gCost === currentNode.gCost){\n                    currentNode = node\n                }\n            }\n        })\n\n        // Remove current node from open and add to close\n        open.splice(open.indexOf(currentNode), 1 );\n        close.push(currentNode)\n        aStarAnimation.push([3, currentNode.row, currentNode.col])\n\n\n\n\n\n\n        // If endNode is reached, return\n        if(currentNode === endNode){\n            console.log('Reached!')\n            let path = []\n            let pathAnimation = []\n            let step = endNode.parent\n            let stepCount = 1\n            while(step!== startNode){\n                path.push(step)\n                pathAnimation.push([1, step.row, step.col, color1])\n                step = step.parent\n                stepCount ++\n            }\n            console.log('A* step count: '+ stepCount)\n            pathAnimation.reverse()\n            pathAnimation.forEach((step)=>{\n                aStarAnimation.push(step)\n            })\n            return aStarAnimation\n        }\n\n        // Get current node neighbor\n        let neighbors = getNeighbors(currentNode, grid)\n\n        // Loop through all neighbors\n        neighbors.forEach((node)=>{\n            // If node is not wall and not in closed \n            if(node.wall === false && close.includes(node)===false){\n                if(open.includes(node)===false){\n                    // [node.gCost,node.hCost,node.fCost] = calculateCosts(node, startNode, endNode)\n                    // node.gCost = getgCost(node, startNode, endNode)\n                    // node.hCost = gethCost(node, startNode, endNode)\n                    // node.fCost = getfCost(node, startNode, endNode)\n\n                    node.gCost = currentNode.gCost + 1\n                    node.hCost = gethCost(node, startNode, endNode)\n                    node.fCost = node.gCost + node.hCost\n\n\n\n\n\n                    open.push(node)\n\n                    node.parent = currentNode\n                    // aStarAnimation.push([2, node.row, node.col])\n                    aStarAnimation.push([2, node.row, node.col])  \n\n                }\n                else{\n                    // let [newgCost, newhCost, newfCost] = calculateCosts(node, startNode, endNode)\n                    // let newfCost = getfCost(node, startNode, endNode)\n                    // let newhCost = gethCost(node, startNode, endNode)\n                    // let newgCost = getgCost(node, startNode, endNode)\n                    let newgCost = currentNode.gCost + 1\n                    let newhCost = gethCost(node, startNode, endNode)\n                    let newfCost = node.gCost + node.hCost\n\n                    if(newfCost < node.fCost){\n                        console.log('Update fCost ' + newfCost +' '+ node.fCost)\n\n                        node.fCost = newfCost\n                        node.hCost = newhCost\n                        node.gCost = newgCost\n                    } \n                }\n            }\n        })\n    }\n\n}\n\n\n\n// ------------------------------------------------A* Functions------------------------------------------------------------\nfunction getgCost(node, start, end){\n    let gCost = getDistance(start, node)\n    let hCost = getDistance(end, node)\n    let fCost = gCost + hCost\n    // return [gCost,hCost,fCost]\n    return gCost\n}\n\nfunction gethCost(node, start, end){\n    let gCost = getDistance(start, node)\n    let hCost = getDistance(end, node)\n    let fCost = gCost + hCost\n    // return [gCost,hCost,fCost]\n    return hCost\n}\n\nexport function getfCost(node, start, end){\n    let gCost = getDistance(start, node)\n    let hCost = getDistance(end, node)\n    let fCost = gCost + hCost\n    // return [gCost,hCost,fCost]\n    return fCost\n}\n\nexport function testCost(node, startNode, endNode){\n    let g = getgCost(node, startNode, endNode)\n    let h = gethCost(node, startNode, endNode)\n    let f = getfCost(node, startNode, endNode)\n\n    console.log(node.col)\n    console.log(node.row)\n    console.log(node)\n    \n\n\n    console.log('g = ' + g)\n    console.log('h = ' + h)\n    console.log('f = ' + f)\n    console.log(' ')\n}\n\n\n// ------------------------------------------------Other Functions------------------------------------------------------------\n\nexport function getDistance(node1, node2){\n    \n    // let d = ((node1.col - node2.col) **2 + (node1.row - node2.row) **2 ) ** 0.5\n    let d = Math.abs(node2.col-node1.col) + Math.abs(node2.row-node1.row)\n    return d\n\n}\n\n\nfunction getNeighbors(node, grid){\n\n    let neighbors = []\n    let col = node.col\n    let row = node.row\n    \n    if(row>0){\n        neighbors.push(\n            grid[row-1][col]\n        )\n    }\n    if(col>0){\n        neighbors.push(\n            grid[row][col-1]\n        )\n    }\n    \n    if(row<29){\n        neighbors.push(\n            grid[row+1][col]\n        )\n    }\n    if(col<69){\n        neighbors.push(\n            grid[row][col+1]\n        )\n    }\n\n    // if(col>0 && row>0){\n    //     neighbors.push(\n    //         grid[row-1][col-1]\n    //     )\n    // }\n\n    // if(row<29 && col < 69){\n    //     neighbors.push(\n    //         grid[row+1][col+1]\n    //     )\n    // }\n    // if(row>0 && col<69){\n    //     neighbors.push(\n    //         grid[row-1][col+1]\n    //     )\n    // }\n    // if(row<29 && col>0){\n    //     neighbors.push(\n    //         grid[row+1][col-1]\n    //     )\n    // }\n\n    return neighbors\n    \n}\n\nexport function clearAnimations(){\n    aStarAnimation = []\n    dijkstraAnimation = []\n}\n\nfunction getAllNodes(grid){\n    \n    let nodes = []\n    for(let row=0; row<30;row++){\n        for(let col=0; col<70;col++){\n\n            nodes.push(grid[row][col])\n            \n\n        }\n    }\n    return nodes\n\n}\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport './pathFindingVisualiser.css';\nimport {shortestPath} from './pathFindingVisualiser.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Node from './node/node'\nimport {testCost, aStar, clearAnimations, dijkstra} from '../algorithms/pathFindingAlgorithms.js'\nimport Select from \"react-dropdown-select\";\n\n\n\n\n/* eslint-disable */\n\n\nlet startRow;\nlet startCol;\nlet endRow;\nlet endCol;\n\nlet options=[\n    { label: \"dijkstra\", value:'dijkstra' },\n    { label: \"A* Search\", value: 'A*' },\n\n]\n\nclass PathFinder extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            grid : [],\n            mousePress: false,\n            status : '',\n            speed: 200,\n            algorithm: '',\n            \n        };\n    }\n\n\n\n// ------------------------------------- Generate Grid----------------------------------------------------\n\n    reSetGrid = () => {\n\n        let temp = []\n        for(let row=0; row<30;row++){\n            let currentRow = []\n            for(let col=0; col<70;col++){\n                let node = {\n                    row:row,\n                    col:col,\n                    start: false,\n                    end: false,\n                    wall:  false,\n                    path:false,\n                }\n                \n                currentRow.push(node)\n            }\n            temp.push(currentRow)\n        }\n\n        this.setState({grid:temp})\n        // console.log(temp)\n        return temp\n\n    }\n\n    reSetClass = () => {\n\n        this.reSetGrid()\n\n\n        // let newGrid = this.state.grid.slice();\n        for(let row=0; row<30;row++){\n            for(let col=0; col<70;col++){\n                // if(row===startRow&&col===startCol){\n                //     document.getElementById(`node-${row}-${col}`).className =\n                //     'node node-start border-0';\n                // }else if(row===endRow&&col===endCol){\n                //     document.getElementById(`node-${row}-${col}`).className =\n                //     'node node-end border-0';\n                // }else{\n                    document.getElementById(`node-${row}-${col}`).className =\n                    'node';  \n                    // grid[row][col].start= false;\n                    // grid[row][col].end = false;\n                    // grid[row][col].wall=  false;\n                // }\n                \n                // let node = newGrid[row][col];\n                // node.wall = false\n                \n                // let newNode = node\n                // newGrid[row][col] = newNode;\n            \n\n            }         \n        }\n\n        // this.setState({grid:newGrid})\n        clearAnimations()\n    }\n\n    componentDidMount(){\n        this.reSetGrid()\n\n    }\n\n    // Handle slide change on speed\n    speedOnChange = (e) => {\n        this.setState({speed: e.target.value})\n    }\n\n\n\n// ------------------------------------- setWall----------------------------------------------------\n\n    mouseDownHandler = (row,col) => {\n        if(this.state.status === 'setWall'){\n            let newGrid = this.createWallToggle(this.state.grid, row, col)\n            this.setState({grid:newGrid})\n            this.setState({mousePress:true})\n        } else{\n            return\n        }\n        \n    }\n\n    \n    mouseEnterHandler = (row,col) => {\n        if(this.state.mousePress === true && this.state.status === 'setWall'){\n            let newGrid = this.createWallToggle(this.state.grid, row, col)\n            this.setState({grid:newGrid})\n        }else{\n            return\n        }\n    }\n\n    mouseUpHandler = () => {\n        if(this.state.status==='setWall'){\n            this.setState({mousePress:false})\n        } else {\n            return\n        }\n    }\n\n    createWallToggle = (grid, row, col) => {\n        let newGrid = grid.slice();\n        let node = newGrid[row][col];\n        node.wall = true\n        \n        let newNode = node\n        newGrid[row][col] = newNode;\n        document.getElementById(`node-${row}-${col}`).className =\n                    'node node-wall border-0';\n        return newGrid;\n    };\n\n    autoGenerate = () =>{\n\n        this.reSetClass()\n        // this.reSetGrid()\n        let grid = this.reSetGrid()\n\n        clearAnimations()\n\n\n        let col1 = Math.floor(Math.random() * 70);\n        let row1 = Math.floor(Math.random() * 30);\n        let col2 = Math.floor(Math.random() * 70);\n        let row2 = Math.floor(Math.random() * 30);\n\n        let node1 = grid[row1][col1];\n        let node2 = grid[row2][col2];\n\n        node1.start = true\n        startRow = row1\n        startCol = col1\n\n        node2.end = true\n        endRow = row2\n        endCol = col2\n\n        \n        \n        for(let n=0; n<700; n++){\n            let col = Math.floor(Math.random() * 70);\n            let row = Math.floor(Math.random() * 30);\n\n            if(col===col1&&row===row1){\n                continue\n            }\n            if(col===col2&&row===row2){\n                continue\n            }\n            document.getElementById(`node-${row}-${col}`).className =\n                    'node node-wall border-0';\n            // this.createWallToggle(newGrid, row, col);\n            grid[row][col].wall = true\n        }\n\n        this.setState({grid:grid})\n\n    }\n\n\n// ------------------------------------- set Start and End ----------------------------------------------------\n\n\n    onClickChange = (row,col) => {\n        let {grid} = this.state\n        if(this.state.status === 'setStart'){\n            let newGrid = this.createStartOrEnd(grid, row, col)\n            this.setState({grid:newGrid})\n        } else if (this.state.status === 'setEnd'){\n            let newGrid = this.createStartOrEnd(grid, row, col)\n            this.setState({grid:newGrid})\n        } else{\n            console.log(grid[row][col])\n        }\n        this.setState({status:''})\n    }\n\n    createStartOrEnd = (grid, row, col) => {\n        let {status} = this.state\n        let newGrid = grid.slice();\n        let node = newGrid[row][col];\n        if(status==='setStart'){\n            node.start = true\n            startRow = row\n            startCol = col\n        } else if (status === 'setEnd'){\n            node.end = true\n            endRow = row\n            endCol = col\n        } \n        let newNode = node\n        newGrid[row][col] = newNode;\n        return newGrid;\n    };\n\n// ------------------------------------- A* ----------------------------------------------------\n\n    findPath = () => {\n        let {algorithm} = this.state\n\n        if(algorithm === ''){\n            this.doDijkstra()\n        }\n\n        else if(algorithm[0].value === 'A*'){\n            this.doaStar()\n        }else if(algorithm[0].value === 'dijkstra'){\n            this.doDijkstra()\n        }\n    }\n\n\n\n    doaStar=()=>{\n        let {grid} = this.state\n        let aStarAnimation = aStar(grid, grid[startRow][startCol], grid[endRow][endCol])\n        let speed = (1/this.state.speed) * 1000;\n\n        for(let i=0; i<aStarAnimation.length; i++){\n\n            setTimeout(()=>{\n                if(aStarAnimation[i][0] === 1){\n                    let row = aStarAnimation[i][1]\n                    let col = aStarAnimation[i][2]\n                    \n                    document.getElementById(`node-${row}-${col}`).className =\n                      'node node-aStar-path border-0';\n                }\n\n                if(aStarAnimation[i][0] === 2){\n                    let row = aStarAnimation[i][1]\n                    let col = aStarAnimation[i][2]\n\n                    document.getElementById(`node-${row}-${col}`).className =\n                    'node node-open border-0';\n\n                }\n\n                if(aStarAnimation[i][0] === 3){\n                    let row = aStarAnimation[i][1]\n                    let col = aStarAnimation[i][2]\n\n                    if(row===startRow&&col===startCol){\n                        document.getElementById(`node-${row}-${col}`).className =\n                        'node node-start border-0';\n                    }else if(row===endRow&&col===endCol){\n                        document.getElementById(`node-${row}-${col}`).className =\n                        'node node-end border-0';\n                    }else{\n                        document.getElementById(`node-${row}-${col}`).className =\n                        'node node-close border-0';  \n                    }\n                }\n\n            }, i* speed);\n        }\n    }\n    \n// ------------------------------------- dijkstra ----------------------------------------------------\n\ndoDijkstra=()=>{\n    \n    let {grid} = this.state\n    let dijkstraAnimation = dijkstra(grid, grid[startRow][startCol], grid[endRow][endCol])\n    let speed = (1/this.state.speed) * 100;\n\n    for(let i=0; i<dijkstraAnimation.length; i++){\n\n        setTimeout(()=>{\n            if(dijkstraAnimation[i][0] === 1){\n                // speed = (1/this.state.speed) * 1000;\n                let row = dijkstraAnimation[i][1]\n                let col = dijkstraAnimation[i][2]\n                \n                document.getElementById(`node-${row}-${col}`).className =\n                    'node node-dijkstra-path border-0';\n            }\n\n            if(dijkstraAnimation[i][0] === 2){\n                let row = dijkstraAnimation[i][1]\n                let col = dijkstraAnimation[i][2]\n                \n                document.getElementById(`node-${row}-${col}`).className =\n                    'node node-neighbor border-0';\n            }\n\n            if(dijkstraAnimation[i][0] === 3){\n                let row = dijkstraAnimation[i][1]\n                let col = dijkstraAnimation[i][2]\n\n                if(row===startRow&&col===startCol){\n                    document.getElementById(`node-${row}-${col}`).className =\n                    'node node-start border-0';\n                }else if(row===endRow&&col===endCol){\n                    document.getElementById(`node-${row}-${col}`).className =\n                    'node node-end border-0';\n                }else{\n                \n                document.getElementById(`node-${row}-${col}`).className =\n                    'node node-visited border-0';\n                }\n            }\n\n            if(dijkstraAnimation[i][0] === 4){\n                let row = dijkstraAnimation[i][1]\n                let col = dijkstraAnimation[i][2]\n\n                if(row===startRow&&col===startCol){\n                    document.getElementById(`node-${row}-${col}`).className =\n                    'node node-start border-0';\n                }else if(row===endRow&&col===endCol){\n                    document.getElementById(`node-${row}-${col}`).className =\n                    'node node-end border-0';\n                }else{\n                \n                document.getElementById(`node-${row}-${col}`).className =\n                    'node node-current border-0';\n                }\n            }\n\n        }, i* speed);\n    }\n\n}\n\n\n\n// ------------------------------------- Render ----------------------------------------------------\n\n\n    render() { \n\n        let {grid} = this.state\n        // let {options} = this.state\n\n        return ( \n            <div className='container-fluid d-flex align-items-center  main'>\n                <div className='col-md-12'>\n\n                    <div className='row buttons'>\n                        <div className='d-flex align-items-center m-3 mt-5'>\n\n                        <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-right-circle-fill start-btn-icon\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-8.354 2.646a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L9.793 7.5H5a.5.5 0 0 0 0 1h4.793l-2.147 2.146z\"/>\n                        </svg><button onClick={()=>this.setState({status:'setStart'})} className='btn p-1'>Select Start</button>\n\n                        <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" class=\"bi bi-bullseye end-btn-icon\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\n                        <path fill-rule=\"evenodd\" d=\"M8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10zm0 1A6 6 0 1 0 8 2a6 6 0 0 0 0 12z\"/>\n                        <path fill-rule=\"evenodd\" d=\"M8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8z\"/>\n                        <path d=\"M9.5 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\"/>\n                        </svg><button onClick={()=>this.setState({status:'setEnd'})} className='btn p-1'>Select End</button>\n\n\n\n                        <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" class=\"bi bi-bricks wall-btn-icon\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M15 13H1v2h14v-2zM1 12a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H1zm14-5H1v2h14V7zM1 6a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H1z\"/>\n                        <path fill-rule=\"evenodd\" d=\"M13 10H3v2h10v-2zM3 9a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H3zm10-5H3v2h10V4zM3 3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H3z\"/>\n                        <path fill-rule=\"evenodd\" d=\"M15 1H1v2h14V1zM1 0a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1H1z\"/>\n                        <path fill-rule=\"evenodd\" d=\"M5.5 1v2h-1V1h1zm6 0v2h-1V1h1zm-4 5V4h1v2h-1zm-2 1v2h-1V7h1zm6 0v2h-1V7h1zm-4 5v-2h1v2h-1zm-3 3v-2h1v2h-1zm6 0v-2h1v2h-1z\"/>\n                        </svg><button onClick={()=>this.setState({status:'setWall'})} className='btn p-1'>Create Wall</button>\n\n                        <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" class=\"bi bi-lightning text-warning\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M11.251.068a.5.5 0 0 1 .227.58L9.677 6.5H13a.5.5 0 0 1 .364.843l-8 8.5a.5.5 0 0 1-.842-.49L6.323 9.5H3a.5.5 0 0 1-.364-.843l8-8.5a.5.5 0 0 1 .615-.09zM4.157 8.5H7a.5.5 0 0 1 .478.647L6.11 13.59l5.732-6.09H9a.5.5 0 0 1-.478-.647L9.89 2.41 4.157 8.5z\"/>\n                        </svg><button onClick={()=>this.autoGenerate()} className='btn p-1'>Auto Generate Maze</button>\n\n\n                        <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" class=\"bi bi-bicycle\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M3 12a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm0 1a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm10-1a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm0 1a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\"/>\n                        <path fill-rule=\"evenodd\" d=\"M4 4.5a.5.5 0 0 1 .5-.5H6a.5.5 0 0 1 0 1v.5h4.14l.386-1.158A.5.5 0 0 1 11 4h1a.5.5 0 0 1 0 1h-.64l-.311.935 2.375 3.8a.5.5 0 1 1-.848.53L10.5 6.943l-2.076 3.322A.5.5 0 0 1 8 10.5H3a.5.5 0 0 1-.424-.765L5 5.857V5h-.5a.5.5 0 0 1-.5-.5zm1.5 2.443L3.902 9.5h3.196L5.5 6.943zM8 9.057L9.598 6.5H6.402L8 9.057z\"/>\n                        </svg><span id='speedValue' className='ml-1 mr-1'>Speed:</span><input type=\"range\" className='' min={10} max={500} value={this.state.speed} id='speed' onChange={this.speedOnChange}></input>\n\n                        <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" class=\"bi bi-calculator-fill algorithm-btn text-secondary\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M12 1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4z\"/>\n                        <path d=\"M4 2.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-2zm0 4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-4z\"/>\n                        </svg><span id='speedValue' className='ml-1 mr-1'>Algorithm:</span><Select options={options}  \n                         className=\"text-primary\"\n                         onChange={(value) => this.setState({algorithm:value})}\n                         />\n                        \n  \n\n                        <svg width=\"1.8em\" height=\"1.8em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-repeat\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M2.854 7.146a.5.5 0 0 0-.708 0l-2 2a.5.5 0 1 0 .708.708L2.5 8.207l1.646 1.647a.5.5 0 0 0 .708-.708l-2-2zm13-1a.5.5 0 0 0-.708 0L13.5 7.793l-1.646-1.647a.5.5 0 0 0-.708.708l2 2a.5.5 0 0 0 .708 0l2-2a.5.5 0 0 0 0-.708z\"/>\n                        <path fill-rule=\"evenodd\" d=\"M8 3a4.995 4.995 0 0 0-4.192 2.273.5.5 0 0 1-.837-.546A6 6 0 0 1 14 8a.5.5 0 0 1-1.001 0 5 5 0 0 0-5-5zM2.5 7.5A.5.5 0 0 1 3 8a5 5 0 0 0 9.192 2.727.5.5 0 1 1 .837.546A6 6 0 0 1 2 8a.5.5 0 0 1 .501-.5z\"/>\n                        </svg><button onClick={()=>this.reSetClass()} className='btn p-1'>Reset</button>\n\n                        <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" class=\"bi bi-cursor-fill find-path-btn-icon\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z\"/>\n                        </svg><button onClick={()=>this.findPath()} className='btn p-1'>Find Path</button>\n\n                            {/* <button onClick={()=>this.setState({status:'setStart'})} className='btn btn-success m-2'>Select Start</button> */}\n                            {/* <button onClick={()=>this.setState({status:'setEnd'})} className='btn btn-danger m-2'>Select End</button> */}\n                            {/* <button onClick={()=>this.setState({status:'setWall'})} className='btn btn-secondary m-2'>Create Wall</button> */}\n                            {/* <button onClick={()=>this.find()} className='btn btn-primary m-2'>Find Path</button> */}\n\n                        </div>                \n                    </div>\n\n                    {/* <div className='row'> */}\n                        <div className='col-md-12 grid p-0'>\n\n\n                            {grid.map((row,rowIdx) => {\n                                return <div className='grid-row d-flex justify-content-center' key={rowIdx}>\n\n                                    {row.map((node, nodeIdx) => {\n                                        let {col, row, start, end, wall, path} = node\n\n                                        return (\n                                            <Node\n                                            key={nodeIdx}\n                                            col={col}\n                                            row={row}\n                                            start={start}\n                                            end={end}\n                                            wall={wall}\n                                            path={path}\n                                            onMouseDown={(col,row)=> this.mouseDownHandler(col,row)}\n                                            onMouseEnter={(col,row)=> this.mouseEnterHandler(col,row)}\n                                            onMouseUp={()=> this.mouseUpHandler()}\n                                            onClick={(col,row)=> this.onClickChange(col,row)}\n\n                                        \n                                            ></Node>\n                                        )\n\n                                    }\n                                        \n\n\n                                        \n                                        \n                                    )}\n                                \n                                </div>\n                            }\n                            )}\n                        </div>\n                    {/* </div> */}\n                </div>\n            </div>\n         );\n    }\n}\n \nexport default PathFinder;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport PathFinder from './pathFinding/pathFindingVisualiser'\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathFinder />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}